#!/usr/bin/env bash

# Command passed as the first argument to the script
cmd="$1"

# Configuration constants
TFILE="$HOME/.config/waybar/timer"
TIME_ZONE="Asia/Amman"
ICON_SIZE="12"
RISE="-2000"

# Function to get the current date and time in the specified time zone
get_current_datetime() {
    dateconv --zone "$TIME_ZONE" now -f "%Y-%m-%d %H:%M:%S"
}

# Function to read the timer file and strip carriage returns
read_timer_file() {
    if [[ -f "$TFILE" ]]; then
        tr -d '\r' < "$TFILE"
    else
        echo "READY|"
    fi
}

# Function to parse the timer file content into target date/time and title
parse_timer_file() {
    IFS='|' read -r DATE_TIME_TARGET DATE_TIME_TARGET_TITLE <<< "$(read_timer_file)"
}

# Function to display the timer status as a JSON object for Waybar
display_timer_status() {
    local status_text="$1"
    local tooltip_text="$2"
    echo '{"text": "'"$status_text"'", "tooltip": "'"$tooltip_text"'"}'
}

# Main logic based on the command
case "$cmd" in
    check)
        # Get the current date and time
        DATE_TIME_NOW=$(get_current_datetime)
        
        # Parse the timer file
        parse_timer_file

        # Check the status of the timer
        if [[ "$DATE_TIME_TARGET" == "READY" ]]; then
            # Timer is not active
            display_timer_status "<span font='$ICON_SIZE' rise='$RISE'>󰔛</span>" "Timer is not active"

        elif [[ "$DATE_TIME_TARGET" == "FINISHED" ]]; then
            # Timer has finished
            echo "READY" > "$TFILE"
            zenity --info --no-wrap --text="Timer expired!"
            display_timer_status "<span font='$ICON_SIZE' rise='$RISE'>󰔛</span>" ""

        elif datetest "$DATE_TIME_TARGET" --gt "$DATE_TIME_NOW"; then
            # Timer is active and has not yet finished
            REMAINING=$(datediff now "$DATE_TIME_TARGET" -f '%dd %0H:%0M:%0S' --from-zone="$TIME_ZONE")
            DATE_TIME_TARGET_SHORT="${DATE_TIME_TARGET:0:-3}"
            tooltip_text="$DATE_TIME_TARGET_TITLE\n$DATE_TIME_TARGET_SHORT\nRemaining: $REMAINING"
            display_timer_status "<span font='$ICON_SIZE' rise='$RISE'>󰔟</span> $REMAINING" "$tooltip_text"

        else
            # Timer has finished but the file was not updated yet
            echo "FINISHED" > "$TFILE"
            display_timer_status "<span font='$ICON_SIZE' rise='$RISE'>󰔛</span>" ""
        fi
        ;;

    minute_dialog)
        # Prompt the user to set a timer with days, hours, minutes, and seconds in one window
        TIMER_TARGET=$(zenity --forms --title="Set Timer" \
            --text="Select the timer duration:" \
            --add-entry="Days (0-365):" \
            --add-entry="Hours (0-23):" \
            --add-entry="Minutes (0-59):" \
            --add-entry="Seconds (0-59):")
        
        if [[ $? -eq 0 ]]; then
            # Parse the user input
            IFS='|' read -r DAYS HOURS MINUTES SECONDS <<< "$TIMER_TARGET"

            # Default empty inputs to zero
            DAYS=${DAYS:-0}
            HOURS=${HOURS:-0}
            MINUTES=${MINUTES:-0}
            SECONDS=${SECONDS:-0}

            # Validate input
            if ! [[ "$DAYS" =~ ^[0-9]*$ ]] || ! [[ "$HOURS" =~ ^[0-9]*$ ]] || ! [[ "$MINUTES" =~ ^[0-9]*$ ]] || ! [[ "$SECONDS" =~ ^[0-9]*$ ]]; then
                zenity --error --text="All values must be integers."
                exit 1
            fi

            if (( DAYS < 0 || DAYS > 365 || HOURS < 0 || HOURS > 23 || MINUTES < 0 || MINUTES > 59 || SECONDS < 0 || SECONDS > 59 )); then
                zenity --error --text="Values out of range. Days: 0-365, Hours: 0-23, Minutes: 0-59, Seconds: 0-59."
                exit 1
            fi

            # Calculate the target date and time
            TARGET_DATE=$(date -d "+${DAYS} days +${HOURS} hours +${MINUTES} minutes +${SECONDS} seconds" '+%Y-%m-%d %H:%M:%S')
            echo "$TARGET_DATE|Timer" > "$TFILE"
        fi
        ;;

    stop)
        # Stop the timer by setting the status to READY
        echo "READY" > "$TFILE"
        ;;

    *)
        # Handle invalid commands
        echo "Invalid command"
        exit 1
        ;;
esac
